# --------------------------
# Etapa de compilación (builder)
# --------------------------
FROM node:18 AS builder

# Activar Yarn primero
RUN corepack enable && corepack prepare yarn@4.9.4 --activate

WORKDIR /Sevens-Core

# --- CORRECCIÓN Y OPTIMIZACIÓN ---
# 1. Copiar solo los manifiestos de dependencias.
# Esto crea una capa que solo se invalida si los package.json o yarn.lock cambian.
COPY package.json yarn.lock ./
COPY apps/*/package.json ./apps/*/
COPY packages/*/package.json ./packages/*/
# Si tienes más carpetas con workspaces, añádelas aquí. Por ejemplo:
# COPY infra/*/package.json ./infra/*/


# 2. Instalar dependencias ANTES de copiar el resto del código fuente.
# Esto asegura que los node_modules se guarden en una capa cacheads.
RUN yarn install --immutable


# 3. Ahora, copiar todo el código fuente.
# Si solo cambias el código, Docker reutilizará la capa de 'yarn install' de arriba.
COPY . .


# 4. Compilar la aplicación específica.
# No es necesario cambiar de directorio, puedes ejecutarlo desde la raíz.
RUN yarn workspace @sevens/core-gateway build


# --------------------------
# Etapa final Lambda
# --------------------------
FROM public.ecr.aws/lambda/nodejs:18

WORKDIR /var/task

# Copiar los artefactos de compilación desde la etapa 'builder'
COPY --from=builder /Sevens-Core/apps/core-gateway/dist ./dist
COPY --from=builder /Sevens-Core/apps/core-gateway/package.json ./

# Copiar SOLO las dependencias de producción.
# Esto crea una imagen final mucho más pequeña y segura.
COPY --from=builder /Sevens-Core/node_modules ./node_modules

# NOTA: La siguiente línea es probablemente innecesaria y podría causar problemas.
# La copia de node_modules de arriba ya debería incluir los workspaces
# correctamente enlazados por Yarn. Te recomiendo eliminarla.
# COPY --from=builder /Sevens-Core/packages ./node_modules/@sevens

# Definir handler de Lambda
CMD ["dist/main.handler"]
