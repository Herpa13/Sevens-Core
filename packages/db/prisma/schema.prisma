generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InventoryMovementType {
  ADJUSTMENT
  PO_RECEIPT
  SALE
  RETURN
  TRANSFER_IN
  TRANSFER_OUT
}

model Company {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  taxId          String?
  country        String
  currency       String
  brands         Brand[]
  warehouses     Warehouse[]
  listings       Listing[]
  salesOrders    SalesOrder[]
  lots           Lot[]
  sellerAccounts SellerAccount[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Brand {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  name        String
  slug        String
  listings    Listing[]
  salesOrders SalesOrder[]
  lots        Lot[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([companyId, name])
  @@unique([companyId, slug])
  @@unique([id, companyId])
}

model Warehouse {
  id         String      @id @default(cuid())
  companyId  String
  company    Company     @relation(fields: [companyId], references: [id])
  code       String
  stockItems StockItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([companyId, code])
}

model Channel {
  id    String        @id @default(cuid())
  code  String        @unique
  name  String
  sites ChannelSite[]
}

model ChannelSite {
  id            String        @id @default(cuid())
  channelId     String
  channel       Channel       @relation(fields: [channelId], references: [id])
  code          String
  sellerAccounts SellerAccount[]

  @@unique([channelId, code])
}

model SellerAccount {
  id            String      @id @default(cuid())
  companyId     String
  channelSiteId String
  company       Company     @relation(fields: [companyId], references: [id])
  channelSite   ChannelSite @relation(fields: [channelSiteId], references: [id])
  listings      Listing[]

  @@unique([companyId, channelSiteId])
}

model Listing {
  id              String        @id @default(cuid())
  companyId       String
  brandId         String
  brand           Brand         @relation(fields: [brandId, companyId], references: [id, companyId])
  sellerAccountId String
  sellerAccount   SellerAccount @relation(fields: [sellerAccountId], references: [id])
  variantId       String
  price           Decimal?      @db.Decimal(18, 4)
  currency        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([brandId, companyId])
  @@unique([sellerAccountId, variantId])
}

model SalesOrder {
  id        String   @id @default(cuid())
  companyId String
  brandId   String
  brand     Brand    @relation(fields: [brandId, companyId], references: [id, companyId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id         String   @id @default(cuid())
  companyId  String
  brandId    String
  productId  String
  variantId  String
  code       String
  brand      Brand    @relation(fields: [brandId, companyId], references: [id, companyId])
  stockItems StockItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StockItem {
  id          String   @id @default(cuid())
  warehouseId String
  variantId   String
  lotId       String?
  quantity    Int      @default(0)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  lot         Lot?     @relation(fields: [lotId], references: [id])
  movements   InventoryMovement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([warehouseId, variantId, lotId])
}

model InventoryMovement {
  id          String               @id @default(cuid())
  stockItemId String
  type        InventoryMovementType
  quantity    Int
  createdAt   DateTime             @default(now())
  stockItem   StockItem            @relation(fields: [stockItemId], references: [id])
}
